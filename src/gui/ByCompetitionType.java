/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Color;
import java.awt.Font;
import java.awt.Paint;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import services.InscriptionService;

/**
 *
 * @author hamza
 */
public class ByCompetitionType extends javax.swing.JInternalFrame {

    /**
     * Creates new form ByCompetitionType
     */
    public ByCompetitionType() {
        super("Student % by Competition Type", true, true, true, true);
        setSize(1000, 700);
        setFrameIcon(new ImageIcon(getClass().getResource("/icons/balls.png")));

        InscriptionService service = new InscriptionService();
        Map<String, Integer> dataMap = service.getStudentCountByCompetitionType();

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (Map.Entry<String, Integer> entry : dataMap.entrySet()) {
            dataset.addValue(entry.getValue(), "Students", entry.getKey());
        }

        JFreeChart chart = ChartFactory.createBarChart(
                "Student % by Competition Type",
                "Competition Type",
                "Student Count",
                dataset,
                PlotOrientation.VERTICAL,
                true,
                true,
                false
        );

        // Define custom colors for each type
        Map<String, Color> colorMap = new HashMap<>();
        colorMap.put("Collectif", new Color(0xff005e));
        colorMap.put("individuel", new Color(0xfffe00));

        // Custom renderer to apply colors by type
        BarRenderer renderer = new BarRenderer() {
            @Override
            public Paint getItemPaint(int row, int column) {
                String type = (String) dataset.getColumnKey(column);
                return colorMap.getOrDefault(type, Color.GRAY);
            }
        };

        // Show percentages on top
        int total = dataMap.values().stream().mapToInt(Integer::intValue).sum();
        renderer.setDefaultItemLabelGenerator(new CategoryItemLabelGenerator() {
            @Override
            public String generateLabel(CategoryDataset dataset, int row, int column) {
                Number value = dataset.getValue(row, column);
                double percent = value.doubleValue() / total;
                return new DecimalFormat("0.0%").format(percent);
            }

            @Override
            public String generateRowLabel(CategoryDataset dataset, int row) {
                return dataset.getRowKey(row).toString();
            }

            @Override
            public String generateColumnLabel(CategoryDataset dataset, int column) {
                return dataset.getColumnKey(column).toString();
            }
        });
        renderer.setDefaultItemLabelsVisible(true);

        CategoryPlot plot = chart.getCategoryPlot();
        plot.setRenderer(renderer);

        ChartPanel chartPanel = new ChartPanel(chart);
        setContentPane(chartPanel);

        CategoryPlot plote = chart.getCategoryPlot();

// Set title font
        chart.getTitle().setFont(new Font("SansSerif", Font.BOLD, 22));

// Set axis label fonts
        plote.getDomainAxis().setLabelFont(new Font("SansSerif", Font.BOLD, 16));
        plote.getRangeAxis().setLabelFont(new Font("SansSerif", Font.BOLD, 16));

// Set axis tick label fonts
        plote.getDomainAxis().setTickLabelFont(new Font("SansSerif", Font.PLAIN, 14));
        plote.getRangeAxis().setTickLabelFont(new Font("SansSerif", Font.PLAIN, 14));

        renderer.setDefaultItemLabelFont(new Font("SansSerif", Font.BOLD, 14));
        renderer.setDefaultItemLabelsVisible(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setClosable(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1089, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 687, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
