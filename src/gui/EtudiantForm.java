/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import entities.Competition;
import entities.Etudiant;
import entities.Inscription;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import services.CompetitionService;
import services.EtudiantService;
import services.InscriptionService;

/**
 *
 * @author hamza
 */
public class EtudiantForm extends javax.swing.JInternalFrame {

    private EtudiantService es;
    private CompetitionService cs;
    private InscriptionService is;
    private DefaultTableModel model;
    private static int id;
    private static String competitionName;
    private static final String t = "-- Choisir une compétition --";

    /**
     * Creates new form EtudiantForm
     */
    public EtudiantForm() {
        initComponents();
        this.setTitle("Gestion des Etudiants");
        setFrameIcon(new ImageIcon(getClass().getResource("/icons/balls.png")));
        es = new EtudiantService();
        cs = new CompetitionService();
        is = new InscriptionService();
        model = (DefaultTableModel) listeEtudiants.getModel();
        load();
        loadCompetitions();
    }

    public void loadCompetitions() {
        listeComp.removeAllItems();
        //listeComp.addItem(null);
        listeComp.addItem(t);

        for (Competition c : cs.findAll()) {
            listeComp.addItem(c);
        }
    }

    public void load() {
        model.setRowCount(0);
        List<Inscription> inscriptions = is.findAll();
        for (Inscription i : inscriptions) {
            Etudiant e = i.getEtudiant();
            Competition c = i.getCompetition();
            model.addRow(new Object[]{
                e.getId(),
                e.getNom(),
                e.getPrenom(),
                c.getNom(),
                e.getEmail()
            });
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtNom = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtPrenom = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        buttonAdd = new javax.swing.JButton();
        buttonModify = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        listeComp = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listeEtudiants = new javax.swing.JTable();

        setBorder(null);
        setClosable(true);
        setForeground(java.awt.Color.darkGray);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Nom");

        txtNom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomActionPerformed(evt);
            }
        });

        jLabel2.setText("Prénom");

        jLabel3.setText("Email");

        jLabel4.setText("Compétition");

        txtPrenom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPrenomActionPerformed(evt);
            }
        });

        buttonAdd.setText("Ajouter");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        buttonModify.setText("Modifier");
        buttonModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonModifyActionPerformed(evt);
            }
        });

        buttonDelete.setText("Supprimer");
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        listeComp.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selectionner..." }));
        listeComp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listeCompActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNom, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(80, 80, 80)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPrenom, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listeComp, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(208, 208, 208)
                        .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonModify, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(buttonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)))
                .addGap(130, 130, 130))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(txtPrenom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(listeComp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonModify)
                    .addComponent(buttonAdd)
                    .addComponent(buttonDelete))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        listeEtudiants.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nom", "Prénom", "Compétition", "Email"
            }
        ));
        listeEtudiants.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listeEtudiantsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listeEtudiants);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1)
                .addGap(20, 20, 20))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomActionPerformed

    private void txtPrenomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPrenomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPrenomActionPerformed

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        // TODO add your handling code here:
        String nom = txtNom.getText().toString().toUpperCase().trim();
        String prenom = txtPrenom.getText().toString().trim();
        String email = txtEmail.getText().toString().trim();
        if (nom.trim().isEmpty() || prenom.trim().isEmpty() || email.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Veuillez remplir tous les champs!", "Erreur", JOptionPane.ERROR_MESSAGE);
            return;
        }
        prenom = txtPrenom.getText().toString().substring(0, 1).toUpperCase() + txtPrenom.getText().toString().substring(1).toLowerCase().trim();
        if (listeComp.getSelectedItem() == null || listeComp.getSelectedItem() == t) {
            JOptionPane.showMessageDialog(this, "Veuillez remplir tous les champs!", "Erreur", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Competition comp = (Competition) listeComp.getSelectedItem();
        Etudiant existingEtudiant = es.findByEmail(email);
        if (existingEtudiant != null && email.equals(existingEtudiant.getEmail()) && comp.equals(is.findByCompetitionNameAndEtudiantId(comp.getNom(), es.findByEmail(email).getId()).getCompetition())) {
            JOptionPane.showMessageDialog(this, "Inscription existe déjà!", "Erreur", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (es.create(new Etudiant(nom, prenom, email))) {
            Etudiant savedEtudiant = es.findByEmail(email);
            System.out.println(savedEtudiant);
            if (savedEtudiant != null && comp != null) {
                Inscription inscription = new Inscription(comp, savedEtudiant);
                is.create(inscription);
                System.out.println(" Inscription créée pour " + savedEtudiant.getNom() + " au Competition " + comp.getNom());
                load();
                txtNom.setText(null);
                txtPrenom.setText(null);
                txtEmail.setText(null);
                listeComp.setSelectedItem(t);
                JOptionPane.showMessageDialog(this, "Registred Successfully");
            }
        }
    }//GEN-LAST:event_buttonAddActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        int selectedRow = listeEtudiants.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Veuillez sélectionner un étudiant dans la liste.", "Erreur", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int choice = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment Supprimer l'étudiant " + model.getValueAt(listeEtudiants.getSelectedRow(), 1) + " " + model.getValueAt(listeEtudiants.getSelectedRow(), 2));
        if (choice == 0) {
            Inscription x = is.findByCompetitionNameAndEtudiantId(competitionName, id);
            is.delete(x);
            es.delete(es.findById(id));
            load();
            txtNom.setText("");
            txtPrenom.setText("");
            txtEmail.setText("");
            listeComp.setSelectedItem(t);
            JOptionPane.showMessageDialog(this, "Etudiant bien Supprimé!");
        }
    }//GEN-LAST:event_buttonDeleteActionPerformed

    private void listeEtudiantsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listeEtudiantsMouseClicked
        id = Integer.parseInt(model.getValueAt(listeEtudiants.getSelectedRow(), 0).toString());
        txtNom.setText(model.getValueAt(listeEtudiants.getSelectedRow(), 1).toString());
        txtPrenom.setText(model.getValueAt(listeEtudiants.getSelectedRow(), 2).toString());
        competitionName = model.getValueAt(listeEtudiants.getSelectedRow(), 3).toString();
        for (int i = 1; i < listeComp.getItemCount(); i++) {
            Competition c = (Competition) listeComp.getItemAt(i);
            if (c.getNom().equalsIgnoreCase(competitionName)) {
                listeComp.setSelectedItem(c);
                break;
            }
        }
        txtEmail.setText(model.getValueAt(listeEtudiants.getSelectedRow(), 4).toString());
    }//GEN-LAST:event_listeEtudiantsMouseClicked

    private void buttonModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonModifyActionPerformed
        int selectedRow = listeEtudiants.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Veuillez sélectionner un étudiant dans la liste.", "Erreur", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String nom = txtNom.getText().toString().toUpperCase().trim();
        String prenom = txtPrenom.getText().toString().trim();
        String email = txtEmail.getText().toString().trim();
        if (nom.trim().isEmpty() || prenom.trim().isEmpty() || email.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Veuillez remplir tous les champs!", "Erreur", JOptionPane.ERROR_MESSAGE);
            return;
        }
        prenom = txtPrenom.getText().toString().substring(0, 1).toUpperCase() + txtPrenom.getText().toString().substring(1).toLowerCase().trim();
        if (listeComp.getSelectedItem() == null || listeComp.getSelectedItem() == t) {
            JOptionPane.showMessageDialog(this, "Veuillez remplir tous les champs!", "Erreur", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Competition comp = (Competition) listeComp.getSelectedItem();
        int choice = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier l'étudiant " + model.getValueAt(selectedRow, 1) + " " + model.getValueAt(selectedRow, 2) + " ?");
        if (choice == 0) {
            Etudiant etd = es.findById(id);
            etd.setNom(nom);
            etd.setPrenom(prenom);
            etd.setEmail(email);

            if (es.update(etd)) {
                Inscription x = is.findByCompetitionNameAndEtudiantId(competitionName, id);
                int oldCompId = x.getCompetition().getId();
                int etudId = x.getEtudiant().getId();
                is.updateCompetition(oldCompId, etudId, comp.getId());

                load();
                txtNom.setText("");
                txtPrenom.setText("");
                txtEmail.setText("");
                listeComp.setSelectedItem(t);
                JOptionPane.showMessageDialog(this, "Étudiant bien modifié !");
            } else {
                JOptionPane.showMessageDialog(this, "Modification Annulée !");
            }
        }
    }//GEN-LAST:event_buttonModifyActionPerformed

    private void listeCompActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listeCompActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_listeCompActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened

    }//GEN-LAST:event_formInternalFrameOpened


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonModify;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox listeComp;
    private javax.swing.JTable listeEtudiants;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNom;
    private javax.swing.JTextField txtPrenom;
    // End of variables declaration//GEN-END:variables
}
